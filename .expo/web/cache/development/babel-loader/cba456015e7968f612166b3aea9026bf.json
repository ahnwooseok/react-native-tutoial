{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, options) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        acc.push([options, child.props]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.type !== Group ? options : options != null ? [].concat(_toConsumableArray(options), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$ = config[1],\n          name = _config$.name,\n          children = _config$.children,\n          component = _config$.component,\n          getComponent = _config$.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config[1].name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config[1].name + \"')\");\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config[1].name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr][1].initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return _extends(acc, _defineProperty({}, curr, screens[curr][1].getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(NavigationStateContext),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr][1].initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name][1].listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = useChildListeners(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","getRouteConfigsFromChildren","children","options","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","screenOptions","Error","_child$type","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","routeGetIdList","Object","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","_route","index","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}