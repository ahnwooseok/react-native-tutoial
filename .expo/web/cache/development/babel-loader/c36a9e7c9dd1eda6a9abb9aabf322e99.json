{"ast":null,"code":"import { NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useLinkTo from \"./useLinkTo\";\nexport default function useLinkProps(_ref) {\n  var to = _ref.to,\n      action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linkTo = useLinkTo();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"mappings":"AAAA,SAEEA,6BAFF,EAGEC,wBAHF,QAIO,wBAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAGA,OAAOC,SAAP;AAaA,eAAe,SAASC,YAAT,OAEqB;EAAA,IAAhCC,EAAgC,QAAhCA,EAAgC;EAAA,IAA5BC,MAA4B,QAA5BA,MAA4B;EAClC,IAAMC,IAAI,GAAGL,KAAK,CAACM,UAANN,CAAiBF,6BAAjBE,CAAb;EACA,IAAMO,UAAU,GAAGP,KAAK,CAACM,UAANN,CAAiBD,wBAAjBC,CAAnB;EACA,IAAMQ,MAAM,GAAGP,SAAS,EAAxB;;EAEA,IAAMQ,OAAO,GACXC,SADID,OACJC,EADc,EAEX;IAAA;;IACH,IAAIC,YAAY,GAAG,KAAnB;;IAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyB,CAACF,CAA9B,EAAiC;MAC/BC,YAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAACI,gBAAN,GAAyB,IAAzCH;IADF,OAEO,IACL,CAACD,CAAC,CAACI,gBAAH,IAEA,EAAEJ,CAAC,CAACK,OAAFL,IAAaA,CAAC,CAACM,MAAfN,IAAyBA,CAAC,CAACO,OAA3BP,IAAsCA,CAAC,CAACQ,QAA1C,CAFA,KAICR,CAAC,CAACS,MAAFT,IAAY,IAAZA,IAAoBA,CAAC,CAACS,MAAFT,KAAa,CAJlC,KAMA,CAACU,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BC,QAA9B,qBAAuCX,CAAC,CAACY,aAAzC,qDAAuCC,iBAAiBC,MAAxD,CAPK,EAQL;MACAd,CAAC,CAACe,cAAFf;MACAC,YAAY,GAAG,IAAfA;IACD;;IAED,IAAIA,YAAJ,EAAkB;MAChB,IAAIP,MAAJ,EAAY;QACV,IAAIG,UAAJ,EAAgB;UACdA,UAAU,CAACmB,QAAXnB,CAAoBH,MAApBG;QADF,OAEO,IAAIF,IAAJ,EAAU;UACfA,IAAI,CAACqB,QAALrB,CAAcD,MAAdC;QADK,OAEA;UACL,MAAM,IAAIsB,KAAJ,CACJ,kFADI,CAAN;QAGD;MATH,OAUO;QACLnB,MAAM,CAACL,EAAD,CAANK;MACD;IACF;EAlCH;;EAqCA,OAAO;IACLoB,IAAI,EAAEzB,EADD;IAEL0B,iBAAiB,EAAE,MAFd;IAGLpB;EAHK,CAAP;AAKD","names":["NavigationContainerRefContext","NavigationHelpersContext","React","useLinkTo","useLinkProps","to","action","root","useContext","navigation","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","href","accessibilityRole"],"sources":["useLinkProps.tsx"],"sourcesContent":["import {\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}